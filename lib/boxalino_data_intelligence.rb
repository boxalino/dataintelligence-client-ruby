#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'boxalino_data_intelligence_v1_types'

module BoxalinoDataIntelligence
  class Client
    include ::Thrift::Client

    def GetAuthentication(authentication)
      send_GetAuthentication(authentication)
      return recv_GetAuthentication()
    end

    def send_GetAuthentication(authentication)
      send_message('GetAuthentication', GetAuthentication_args, :authentication => authentication)
    end

    def recv_GetAuthentication()
      result = receive_message(GetAuthentication_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetAuthentication failed: unknown result')
    end

    def UpdatePassword(authentication, newPassword)
      send_UpdatePassword(authentication, newPassword)
      recv_UpdatePassword()
    end

    def send_UpdatePassword(authentication, newPassword)
      send_message('UpdatePassword', UpdatePassword_args, :authentication => authentication, :newPassword => newPassword)
    end

    def recv_UpdatePassword()
      result = receive_message(UpdatePassword_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetConfigurationVersion(authentication, versionType)
      send_GetConfigurationVersion(authentication, versionType)
      return recv_GetConfigurationVersion()
    end

    def send_GetConfigurationVersion(authentication, versionType)
      send_message('GetConfigurationVersion', GetConfigurationVersion_args, :authentication => authentication, :versionType => versionType)
    end

    def recv_GetConfigurationVersion()
      result = receive_message(GetConfigurationVersion_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetConfigurationVersion failed: unknown result')
    end

    def SetDataSourcesConfiguration(authentication, configurationVersion, dataSourcesConfigurationXML)
      send_SetDataSourcesConfiguration(authentication, configurationVersion, dataSourcesConfigurationXML)
      recv_SetDataSourcesConfiguration()
    end

    def send_SetDataSourcesConfiguration(authentication, configurationVersion, dataSourcesConfigurationXML)
      send_message('SetDataSourcesConfiguration', SetDataSourcesConfiguration_args, :authentication => authentication, :configurationVersion => configurationVersion, :dataSourcesConfigurationXML => dataSourcesConfigurationXML)
    end

    def recv_SetDataSourcesConfiguration()
      result = receive_message(SetDataSourcesConfiguration_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetFields(authentication, configuration)
      send_GetFields(authentication, configuration)
      return recv_GetFields()
    end

    def send_GetFields(authentication, configuration)
      send_message('GetFields', GetFields_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetFields()
      result = receive_message(GetFields_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetFields failed: unknown result')
    end

    def CreateField(authentication, configuration, fieldId)
      send_CreateField(authentication, configuration, fieldId)
      recv_CreateField()
    end

    def send_CreateField(authentication, configuration, fieldId)
      send_message('CreateField', CreateField_args, :authentication => authentication, :configuration => configuration, :fieldId => fieldId)
    end

    def recv_CreateField()
      result = receive_message(CreateField_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateField(authentication, configuration, field)
      send_UpdateField(authentication, configuration, field)
      recv_UpdateField()
    end

    def send_UpdateField(authentication, configuration, field)
      send_message('UpdateField', UpdateField_args, :authentication => authentication, :configuration => configuration, :field => field)
    end

    def recv_UpdateField()
      result = receive_message(UpdateField_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteField(authentication, configuration, fieldId)
      send_DeleteField(authentication, configuration, fieldId)
      recv_DeleteField()
    end

    def send_DeleteField(authentication, configuration, fieldId)
      send_message('DeleteField', DeleteField_args, :authentication => authentication, :configuration => configuration, :fieldId => fieldId)
    end

    def recv_DeleteField()
      result = receive_message(DeleteField_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetProcessTasks(authentication, configuration)
      send_GetProcessTasks(authentication, configuration)
      return recv_GetProcessTasks()
    end

    def send_GetProcessTasks(authentication, configuration)
      send_message('GetProcessTasks', GetProcessTasks_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetProcessTasks()
      result = receive_message(GetProcessTasks_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetProcessTasks failed: unknown result')
    end

    def CreateProcessTask(authentication, configuration, processTaskId)
      send_CreateProcessTask(authentication, configuration, processTaskId)
      recv_CreateProcessTask()
    end

    def send_CreateProcessTask(authentication, configuration, processTaskId)
      send_message('CreateProcessTask', CreateProcessTask_args, :authentication => authentication, :configuration => configuration, :processTaskId => processTaskId)
    end

    def recv_CreateProcessTask()
      result = receive_message(CreateProcessTask_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateProcessTask(authentication, configuration, processTask)
      send_UpdateProcessTask(authentication, configuration, processTask)
      recv_UpdateProcessTask()
    end

    def send_UpdateProcessTask(authentication, configuration, processTask)
      send_message('UpdateProcessTask', UpdateProcessTask_args, :authentication => authentication, :configuration => configuration, :processTask => processTask)
    end

    def recv_UpdateProcessTask()
      result = receive_message(UpdateProcessTask_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteProcessTask(authentication, configuration, processTaskId)
      send_DeleteProcessTask(authentication, configuration, processTaskId)
      recv_DeleteProcessTask()
    end

    def send_DeleteProcessTask(authentication, configuration, processTaskId)
      send_message('DeleteProcessTask', DeleteProcessTask_args, :authentication => authentication, :configuration => configuration, :processTaskId => processTaskId)
    end

    def recv_DeleteProcessTask()
      result = receive_message(DeleteProcessTask_result)
      raise result.e unless result.e.nil?
      return
    end

    def RunProcessTask(authentication, configuration, parameters)
      send_RunProcessTask(authentication, configuration, parameters)
      return recv_RunProcessTask()
    end

    def send_RunProcessTask(authentication, configuration, parameters)
      send_message('RunProcessTask', RunProcessTask_args, :authentication => authentication, :configuration => configuration, :parameters => parameters)
    end

    def recv_RunProcessTask()
      result = receive_message(RunProcessTask_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'RunProcessTask failed: unknown result')
    end

    def GetEmailCampaigns(authentication, configuration)
      send_GetEmailCampaigns(authentication, configuration)
      return recv_GetEmailCampaigns()
    end

    def send_GetEmailCampaigns(authentication, configuration)
      send_message('GetEmailCampaigns', GetEmailCampaigns_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetEmailCampaigns()
      result = receive_message(GetEmailCampaigns_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetEmailCampaigns failed: unknown result')
    end

    def CreateEmailCampaign(authentication, configuration, emailCampaignId)
      send_CreateEmailCampaign(authentication, configuration, emailCampaignId)
      recv_CreateEmailCampaign()
    end

    def send_CreateEmailCampaign(authentication, configuration, emailCampaignId)
      send_message('CreateEmailCampaign', CreateEmailCampaign_args, :authentication => authentication, :configuration => configuration, :emailCampaignId => emailCampaignId)
    end

    def recv_CreateEmailCampaign()
      result = receive_message(CreateEmailCampaign_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateEmailCampaign(authentication, configuration, emailCampaign)
      send_UpdateEmailCampaign(authentication, configuration, emailCampaign)
      recv_UpdateEmailCampaign()
    end

    def send_UpdateEmailCampaign(authentication, configuration, emailCampaign)
      send_message('UpdateEmailCampaign', UpdateEmailCampaign_args, :authentication => authentication, :configuration => configuration, :emailCampaign => emailCampaign)
    end

    def recv_UpdateEmailCampaign()
      result = receive_message(UpdateEmailCampaign_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteEmailCampaign(authentication, configuration, emailCampaignId)
      send_DeleteEmailCampaign(authentication, configuration, emailCampaignId)
      recv_DeleteEmailCampaign()
    end

    def send_DeleteEmailCampaign(authentication, configuration, emailCampaignId)
      send_message('DeleteEmailCampaign', DeleteEmailCampaign_args, :authentication => authentication, :configuration => configuration, :emailCampaignId => emailCampaignId)
    end

    def recv_DeleteEmailCampaign()
      result = receive_message(DeleteEmailCampaign_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetChoices(authentication, configuration, choiceSourceId)
      send_GetChoices(authentication, configuration, choiceSourceId)
      return recv_GetChoices()
    end

    def send_GetChoices(authentication, configuration, choiceSourceId)
      send_message('GetChoices', GetChoices_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId)
    end

    def recv_GetChoices()
      result = receive_message(GetChoices_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetChoices failed: unknown result')
    end

    def CreateChoice(authentication, configuration, choiceSourceId, choiceId)
      send_CreateChoice(authentication, configuration, choiceSourceId, choiceId)
      recv_CreateChoice()
    end

    def send_CreateChoice(authentication, configuration, choiceSourceId, choiceId)
      send_message('CreateChoice', CreateChoice_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choiceId => choiceId)
    end

    def recv_CreateChoice()
      result = receive_message(CreateChoice_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateChoice(authentication, configuration, choiceSourceId, choice)
      send_UpdateChoice(authentication, configuration, choiceSourceId, choice)
      recv_UpdateChoice()
    end

    def send_UpdateChoice(authentication, configuration, choiceSourceId, choice)
      send_message('UpdateChoice', UpdateChoice_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choice => choice)
    end

    def recv_UpdateChoice()
      result = receive_message(UpdateChoice_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteChoice(authentication, configuration, choiceSourceId, choiceId)
      send_DeleteChoice(authentication, configuration, choiceSourceId, choiceId)
      recv_DeleteChoice()
    end

    def send_DeleteChoice(authentication, configuration, choiceSourceId, choiceId)
      send_message('DeleteChoice', DeleteChoice_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choiceId => choiceId)
    end

    def recv_DeleteChoice()
      result = receive_message(DeleteChoice_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetChoiceVariants(authentication, configuration, choiceSourceId, choiceId)
      send_GetChoiceVariants(authentication, configuration, choiceSourceId, choiceId)
      return recv_GetChoiceVariants()
    end

    def send_GetChoiceVariants(authentication, configuration, choiceSourceId, choiceId)
      send_message('GetChoiceVariants', GetChoiceVariants_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choiceId => choiceId)
    end

    def recv_GetChoiceVariants()
      result = receive_message(GetChoiceVariants_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetChoiceVariants failed: unknown result')
    end

    def CreateChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId)
      send_CreateChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId)
      recv_CreateChoiceVariant()
    end

    def send_CreateChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId)
      send_message('CreateChoiceVariant', CreateChoiceVariant_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choiceId => choiceId, :choiceVariantId => choiceVariantId)
    end

    def recv_CreateChoiceVariant()
      result = receive_message(CreateChoiceVariant_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateChoiceVariant(authentication, configuration, choiceSourceId, choiceVariant)
      send_UpdateChoiceVariant(authentication, configuration, choiceSourceId, choiceVariant)
      recv_UpdateChoiceVariant()
    end

    def send_UpdateChoiceVariant(authentication, configuration, choiceSourceId, choiceVariant)
      send_message('UpdateChoiceVariant', UpdateChoiceVariant_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choiceVariant => choiceVariant)
    end

    def recv_UpdateChoiceVariant()
      result = receive_message(UpdateChoiceVariant_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId)
      send_DeleteChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId)
      recv_DeleteChoiceVariant()
    end

    def send_DeleteChoiceVariant(authentication, configuration, choiceSourceId, choiceId, choiceVariantId)
      send_message('DeleteChoiceVariant', DeleteChoiceVariant_args, :authentication => authentication, :configuration => configuration, :choiceSourceId => choiceSourceId, :choiceId => choiceId, :choiceVariantId => choiceVariantId)
    end

    def recv_DeleteChoiceVariant()
      result = receive_message(DeleteChoiceVariant_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetProcessStatus(authentication, configuration, processTaskExecutionId)
      send_GetProcessStatus(authentication, configuration, processTaskExecutionId)
      return recv_GetProcessStatus()
    end

    def send_GetProcessStatus(authentication, configuration, processTaskExecutionId)
      send_message('GetProcessStatus', GetProcessStatus_args, :authentication => authentication, :configuration => configuration, :processTaskExecutionId => processTaskExecutionId)
    end

    def recv_GetProcessStatus()
      result = receive_message(GetProcessStatus_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetProcessStatus failed: unknown result')
    end

    def GetConfigurationDifferences(authentication, configurationVersionSource, configurationVersionDestination)
      send_GetConfigurationDifferences(authentication, configurationVersionSource, configurationVersionDestination)
      return recv_GetConfigurationDifferences()
    end

    def send_GetConfigurationDifferences(authentication, configurationVersionSource, configurationVersionDestination)
      send_message('GetConfigurationDifferences', GetConfigurationDifferences_args, :authentication => authentication, :configurationVersionSource => configurationVersionSource, :configurationVersionDestination => configurationVersionDestination)
    end

    def recv_GetConfigurationDifferences()
      result = receive_message(GetConfigurationDifferences_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetConfigurationDifferences failed: unknown result')
    end

    def PublishConfiguration(authentication, configuration)
      send_PublishConfiguration(authentication, configuration)
      recv_PublishConfiguration()
    end

    def send_PublishConfiguration(authentication, configuration)
      send_message('PublishConfiguration', PublishConfiguration_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_PublishConfiguration()
      result = receive_message(PublishConfiguration_result)
      raise result.e unless result.e.nil?
      return
    end

    def CloneConfiguration(authentication, configuration)
      send_CloneConfiguration(authentication, configuration)
      recv_CloneConfiguration()
    end

    def send_CloneConfiguration(authentication, configuration)
      send_message('CloneConfiguration', CloneConfiguration_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_CloneConfiguration()
      result = receive_message(CloneConfiguration_result)
      raise result.e unless result.e.nil?
      return
    end

    def CreateReferenceCSVFile(authentication, configuration, fileDescriptor)
      send_CreateReferenceCSVFile(authentication, configuration, fileDescriptor)
      return recv_CreateReferenceCSVFile()
    end

    def send_CreateReferenceCSVFile(authentication, configuration, fileDescriptor)
      send_message('CreateReferenceCSVFile', CreateReferenceCSVFile_args, :authentication => authentication, :configuration => configuration, :fileDescriptor => fileDescriptor)
    end

    def recv_CreateReferenceCSVFile()
      result = receive_message(CreateReferenceCSVFile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'CreateReferenceCSVFile failed: unknown result')
    end

    def UpdateReferenceCSVFile(authentication, configuration, fileDescriptor)
      send_UpdateReferenceCSVFile(authentication, configuration, fileDescriptor)
      recv_UpdateReferenceCSVFile()
    end

    def send_UpdateReferenceCSVFile(authentication, configuration, fileDescriptor)
      send_message('UpdateReferenceCSVFile', UpdateReferenceCSVFile_args, :authentication => authentication, :configuration => configuration, :fileDescriptor => fileDescriptor)
    end

    def recv_UpdateReferenceCSVFile()
      result = receive_message(UpdateReferenceCSVFile_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteReferenceCSVFile(authentication, configuration, fileDescriptor)
      send_DeleteReferenceCSVFile(authentication, configuration, fileDescriptor)
      recv_DeleteReferenceCSVFile()
    end

    def send_DeleteReferenceCSVFile(authentication, configuration, fileDescriptor)
      send_message('DeleteReferenceCSVFile', DeleteReferenceCSVFile_args, :authentication => authentication, :configuration => configuration, :fileDescriptor => fileDescriptor)
    end

    def recv_DeleteReferenceCSVFile()
      result = receive_message(DeleteReferenceCSVFile_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetAllReferenceCSVFiles(authentication, configuration)
      send_GetAllReferenceCSVFiles(authentication, configuration)
      return recv_GetAllReferenceCSVFiles()
    end

    def send_GetAllReferenceCSVFiles(authentication, configuration)
      send_message('GetAllReferenceCSVFiles', GetAllReferenceCSVFiles_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetAllReferenceCSVFiles()
      result = receive_message(GetAllReferenceCSVFiles_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetAllReferenceCSVFiles failed: unknown result')
    end

    def CreateFieldsFromReferenceCSVFile(authentication, configurationVersion, fieldsConfigurationXML)
      send_CreateFieldsFromReferenceCSVFile(authentication, configurationVersion, fieldsConfigurationXML)
      recv_CreateFieldsFromReferenceCSVFile()
    end

    def send_CreateFieldsFromReferenceCSVFile(authentication, configurationVersion, fieldsConfigurationXML)
      send_message('CreateFieldsFromReferenceCSVFile', CreateFieldsFromReferenceCSVFile_args, :authentication => authentication, :configurationVersion => configurationVersion, :fieldsConfigurationXML => fieldsConfigurationXML)
    end

    def recv_CreateFieldsFromReferenceCSVFile()
      result = receive_message(CreateFieldsFromReferenceCSVFile_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetSchedulings(authentication, configuration)
      send_GetSchedulings(authentication, configuration)
      return recv_GetSchedulings()
    end

    def send_GetSchedulings(authentication, configuration)
      send_message('GetSchedulings', GetSchedulings_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetSchedulings()
      result = receive_message(GetSchedulings_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetSchedulings failed: unknown result')
    end

    def CreateScheduling(authentication, configuration, schedulingId)
      send_CreateScheduling(authentication, configuration, schedulingId)
      recv_CreateScheduling()
    end

    def send_CreateScheduling(authentication, configuration, schedulingId)
      send_message('CreateScheduling', CreateScheduling_args, :authentication => authentication, :configuration => configuration, :schedulingId => schedulingId)
    end

    def recv_CreateScheduling()
      result = receive_message(CreateScheduling_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateScheduling(authentication, configuration, scheduling)
      send_UpdateScheduling(authentication, configuration, scheduling)
      recv_UpdateScheduling()
    end

    def send_UpdateScheduling(authentication, configuration, scheduling)
      send_message('UpdateScheduling', UpdateScheduling_args, :authentication => authentication, :configuration => configuration, :scheduling => scheduling)
    end

    def recv_UpdateScheduling()
      result = receive_message(UpdateScheduling_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteScheduling(authentication, configuration, schedulingId)
      send_DeleteScheduling(authentication, configuration, schedulingId)
      recv_DeleteScheduling()
    end

    def send_DeleteScheduling(authentication, configuration, schedulingId)
      send_message('DeleteScheduling', DeleteScheduling_args, :authentication => authentication, :configuration => configuration, :schedulingId => schedulingId)
    end

    def recv_DeleteScheduling()
      result = receive_message(DeleteScheduling_result)
      raise result.e unless result.e.nil?
      return
    end

    def RunScheduling(authentication, configuration, parameters)
      send_RunScheduling(authentication, configuration, parameters)
      recv_RunScheduling()
    end

    def send_RunScheduling(authentication, configuration, parameters)
      send_message('RunScheduling', RunScheduling_args, :authentication => authentication, :configuration => configuration, :parameters => parameters)
    end

    def recv_RunScheduling()
      result = receive_message(RunScheduling_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetRecommendationBlocks(authentication, configuration)
      send_GetRecommendationBlocks(authentication, configuration)
      return recv_GetRecommendationBlocks()
    end

    def send_GetRecommendationBlocks(authentication, configuration)
      send_message('GetRecommendationBlocks', GetRecommendationBlocks_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetRecommendationBlocks()
      result = receive_message(GetRecommendationBlocks_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetRecommendationBlocks failed: unknown result')
    end

    def CreateRecommendationBlock(authentication, configuration, recommendationBlockId)
      send_CreateRecommendationBlock(authentication, configuration, recommendationBlockId)
      recv_CreateRecommendationBlock()
    end

    def send_CreateRecommendationBlock(authentication, configuration, recommendationBlockId)
      send_message('CreateRecommendationBlock', CreateRecommendationBlock_args, :authentication => authentication, :configuration => configuration, :recommendationBlockId => recommendationBlockId)
    end

    def recv_CreateRecommendationBlock()
      result = receive_message(CreateRecommendationBlock_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateRecommendationBlock(authentication, configuration, recommendationBlock)
      send_UpdateRecommendationBlock(authentication, configuration, recommendationBlock)
      recv_UpdateRecommendationBlock()
    end

    def send_UpdateRecommendationBlock(authentication, configuration, recommendationBlock)
      send_message('UpdateRecommendationBlock', UpdateRecommendationBlock_args, :authentication => authentication, :configuration => configuration, :recommendationBlock => recommendationBlock)
    end

    def recv_UpdateRecommendationBlock()
      result = receive_message(UpdateRecommendationBlock_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteRecommendationBlock(authentication, configuration, recommendationBlockId)
      send_DeleteRecommendationBlock(authentication, configuration, recommendationBlockId)
      recv_DeleteRecommendationBlock()
    end

    def send_DeleteRecommendationBlock(authentication, configuration, recommendationBlockId)
      send_message('DeleteRecommendationBlock', DeleteRecommendationBlock_args, :authentication => authentication, :configuration => configuration, :recommendationBlockId => recommendationBlockId)
    end

    def recv_DeleteRecommendationBlock()
      result = receive_message(DeleteRecommendationBlock_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetDataSources(authentication, configuration)
      send_GetDataSources(authentication, configuration)
      return recv_GetDataSources()
    end

    def send_GetDataSources(authentication, configuration)
      send_message('GetDataSources', GetDataSources_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetDataSources()
      result = receive_message(GetDataSources_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetDataSources failed: unknown result')
    end

    def CreateDataSource(authentication, configuration, dataSourceId)
      send_CreateDataSource(authentication, configuration, dataSourceId)
      recv_CreateDataSource()
    end

    def send_CreateDataSource(authentication, configuration, dataSourceId)
      send_message('CreateDataSource', CreateDataSource_args, :authentication => authentication, :configuration => configuration, :dataSourceId => dataSourceId)
    end

    def recv_CreateDataSource()
      result = receive_message(CreateDataSource_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateDataSource(authentication, configuration, dataSource)
      send_UpdateDataSource(authentication, configuration, dataSource)
      recv_UpdateDataSource()
    end

    def send_UpdateDataSource(authentication, configuration, dataSource)
      send_message('UpdateDataSource', UpdateDataSource_args, :authentication => authentication, :configuration => configuration, :dataSource => dataSource)
    end

    def recv_UpdateDataSource()
      result = receive_message(UpdateDataSource_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteDataSource(authentication, configuration, dataSourceId)
      send_DeleteDataSource(authentication, configuration, dataSourceId)
      recv_DeleteDataSource()
    end

    def send_DeleteDataSource(authentication, configuration, dataSourceId)
      send_message('DeleteDataSource', DeleteDataSource_args, :authentication => authentication, :configuration => configuration, :dataSourceId => dataSourceId)
    end

    def recv_DeleteDataSource()
      result = receive_message(DeleteDataSource_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetDataExports(authentication, configuration)
      send_GetDataExports(authentication, configuration)
      return recv_GetDataExports()
    end

    def send_GetDataExports(authentication, configuration)
      send_message('GetDataExports', GetDataExports_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetDataExports()
      result = receive_message(GetDataExports_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetDataExports failed: unknown result')
    end

    def CreateDataExport(authentication, configuration, dataExportId)
      send_CreateDataExport(authentication, configuration, dataExportId)
      recv_CreateDataExport()
    end

    def send_CreateDataExport(authentication, configuration, dataExportId)
      send_message('CreateDataExport', CreateDataExport_args, :authentication => authentication, :configuration => configuration, :dataExportId => dataExportId)
    end

    def recv_CreateDataExport()
      result = receive_message(CreateDataExport_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateDataExport(authentication, configuration, dataExport)
      send_UpdateDataExport(authentication, configuration, dataExport)
      recv_UpdateDataExport()
    end

    def send_UpdateDataExport(authentication, configuration, dataExport)
      send_message('UpdateDataExport', UpdateDataExport_args, :authentication => authentication, :configuration => configuration, :dataExport => dataExport)
    end

    def recv_UpdateDataExport()
      result = receive_message(UpdateDataExport_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteDataExport(authentication, configuration, dataExportId)
      send_DeleteDataExport(authentication, configuration, dataExportId)
      recv_DeleteDataExport()
    end

    def send_DeleteDataExport(authentication, configuration, dataExportId)
      send_message('DeleteDataExport', DeleteDataExport_args, :authentication => authentication, :configuration => configuration, :dataExportId => dataExportId)
    end

    def recv_DeleteDataExport()
      result = receive_message(DeleteDataExport_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetReferenceCSVFileDataSources(authentication, configuration)
      send_GetReferenceCSVFileDataSources(authentication, configuration)
      return recv_GetReferenceCSVFileDataSources()
    end

    def send_GetReferenceCSVFileDataSources(authentication, configuration)
      send_message('GetReferenceCSVFileDataSources', GetReferenceCSVFileDataSources_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetReferenceCSVFileDataSources()
      result = receive_message(GetReferenceCSVFileDataSources_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetReferenceCSVFileDataSources failed: unknown result')
    end

    def CreateReferenceCSVDataSource(authentication, configuration, dataSourceId)
      send_CreateReferenceCSVDataSource(authentication, configuration, dataSourceId)
      recv_CreateReferenceCSVDataSource()
    end

    def send_CreateReferenceCSVDataSource(authentication, configuration, dataSourceId)
      send_message('CreateReferenceCSVDataSource', CreateReferenceCSVDataSource_args, :authentication => authentication, :configuration => configuration, :dataSourceId => dataSourceId)
    end

    def recv_CreateReferenceCSVDataSource()
      result = receive_message(CreateReferenceCSVDataSource_result)
      raise result.e unless result.e.nil?
      return
    end

    def UpdateReferenceCSVDataSource(authentication, configuration, dataSource)
      send_UpdateReferenceCSVDataSource(authentication, configuration, dataSource)
      recv_UpdateReferenceCSVDataSource()
    end

    def send_UpdateReferenceCSVDataSource(authentication, configuration, dataSource)
      send_message('UpdateReferenceCSVDataSource', UpdateReferenceCSVDataSource_args, :authentication => authentication, :configuration => configuration, :dataSource => dataSource)
    end

    def recv_UpdateReferenceCSVDataSource()
      result = receive_message(UpdateReferenceCSVDataSource_result)
      raise result.e unless result.e.nil?
      return
    end

    def DeleteReferenceCSVDataSource(authentication, configuration, dataSourceId)
      send_DeleteReferenceCSVDataSource(authentication, configuration, dataSourceId)
      recv_DeleteReferenceCSVDataSource()
    end

    def send_DeleteReferenceCSVDataSource(authentication, configuration, dataSourceId)
      send_message('DeleteReferenceCSVDataSource', DeleteReferenceCSVDataSource_args, :authentication => authentication, :configuration => configuration, :dataSourceId => dataSourceId)
    end

    def recv_DeleteReferenceCSVDataSource()
      result = receive_message(DeleteReferenceCSVDataSource_result)
      raise result.e unless result.e.nil?
      return
    end

    def GetLastTransactionID(authentication, configuration)
      send_GetLastTransactionID(authentication, configuration)
      return recv_GetLastTransactionID()
    end

    def send_GetLastTransactionID(authentication, configuration)
      send_message('GetLastTransactionID', GetLastTransactionID_args, :authentication => authentication, :configuration => configuration)
    end

    def recv_GetLastTransactionID()
      result = receive_message(GetLastTransactionID_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetLastTransactionID failed: unknown result')
    end

    def GetPageViews(authentication, configuration, range, precision)
      send_GetPageViews(authentication, configuration, range, precision)
      return recv_GetPageViews()
    end

    def send_GetPageViews(authentication, configuration, range, precision)
      send_message('GetPageViews', GetPageViews_args, :authentication => authentication, :configuration => configuration, :range => range, :precision => precision)
    end

    def recv_GetPageViews()
      result = receive_message(GetPageViews_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetPageViews failed: unknown result')
    end

    def GetChoiceReport(authentication, configuration, request)
      send_GetChoiceReport(authentication, configuration, request)
      return recv_GetChoiceReport()
    end

    def send_GetChoiceReport(authentication, configuration, request)
      send_message('GetChoiceReport', GetChoiceReport_args, :authentication => authentication, :configuration => configuration, :request => request)
    end

    def recv_GetChoiceReport()
      result = receive_message(GetChoiceReport_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetChoiceReport failed: unknown result')
    end

    def GetTransactionReport(authentication, configuration, request)
      send_GetTransactionReport(authentication, configuration, request)
      return recv_GetTransactionReport()
    end

    def send_GetTransactionReport(authentication, configuration, request)
      send_message('GetTransactionReport', GetTransactionReport_args, :authentication => authentication, :configuration => configuration, :request => request)
    end

    def recv_GetTransactionReport()
      result = receive_message(GetTransactionReport_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetTransactionReport failed: unknown result')
    end

    def GetBehaviorReport(authentication, configuration, request)
      send_GetBehaviorReport(authentication, configuration, request)
      return recv_GetBehaviorReport()
    end

    def send_GetBehaviorReport(authentication, configuration, request)
      send_message('GetBehaviorReport', GetBehaviorReport_args, :authentication => authentication, :configuration => configuration, :request => request)
    end

    def recv_GetBehaviorReport()
      result = receive_message(GetBehaviorReport_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'GetBehaviorReport failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_GetAuthentication(seqid, iprot, oprot)
      args = read_args(iprot, GetAuthentication_args)
      result = GetAuthentication_result.new()
      begin
        result.success = @handler.GetAuthentication(args.authentication)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetAuthentication', seqid)
    end

    def process_UpdatePassword(seqid, iprot, oprot)
      args = read_args(iprot, UpdatePassword_args)
      result = UpdatePassword_result.new()
      begin
        @handler.UpdatePassword(args.authentication, args.newPassword)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdatePassword', seqid)
    end

    def process_GetConfigurationVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetConfigurationVersion_args)
      result = GetConfigurationVersion_result.new()
      begin
        result.success = @handler.GetConfigurationVersion(args.authentication, args.versionType)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetConfigurationVersion', seqid)
    end

    def process_SetDataSourcesConfiguration(seqid, iprot, oprot)
      args = read_args(iprot, SetDataSourcesConfiguration_args)
      result = SetDataSourcesConfiguration_result.new()
      begin
        @handler.SetDataSourcesConfiguration(args.authentication, args.configurationVersion, args.dataSourcesConfigurationXML)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'SetDataSourcesConfiguration', seqid)
    end

    def process_GetFields(seqid, iprot, oprot)
      args = read_args(iprot, GetFields_args)
      result = GetFields_result.new()
      begin
        result.success = @handler.GetFields(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetFields', seqid)
    end

    def process_CreateField(seqid, iprot, oprot)
      args = read_args(iprot, CreateField_args)
      result = CreateField_result.new()
      begin
        @handler.CreateField(args.authentication, args.configuration, args.fieldId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateField', seqid)
    end

    def process_UpdateField(seqid, iprot, oprot)
      args = read_args(iprot, UpdateField_args)
      result = UpdateField_result.new()
      begin
        @handler.UpdateField(args.authentication, args.configuration, args.field)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateField', seqid)
    end

    def process_DeleteField(seqid, iprot, oprot)
      args = read_args(iprot, DeleteField_args)
      result = DeleteField_result.new()
      begin
        @handler.DeleteField(args.authentication, args.configuration, args.fieldId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteField', seqid)
    end

    def process_GetProcessTasks(seqid, iprot, oprot)
      args = read_args(iprot, GetProcessTasks_args)
      result = GetProcessTasks_result.new()
      begin
        result.success = @handler.GetProcessTasks(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetProcessTasks', seqid)
    end

    def process_CreateProcessTask(seqid, iprot, oprot)
      args = read_args(iprot, CreateProcessTask_args)
      result = CreateProcessTask_result.new()
      begin
        @handler.CreateProcessTask(args.authentication, args.configuration, args.processTaskId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateProcessTask', seqid)
    end

    def process_UpdateProcessTask(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProcessTask_args)
      result = UpdateProcessTask_result.new()
      begin
        @handler.UpdateProcessTask(args.authentication, args.configuration, args.processTask)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateProcessTask', seqid)
    end

    def process_DeleteProcessTask(seqid, iprot, oprot)
      args = read_args(iprot, DeleteProcessTask_args)
      result = DeleteProcessTask_result.new()
      begin
        @handler.DeleteProcessTask(args.authentication, args.configuration, args.processTaskId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteProcessTask', seqid)
    end

    def process_RunProcessTask(seqid, iprot, oprot)
      args = read_args(iprot, RunProcessTask_args)
      result = RunProcessTask_result.new()
      begin
        result.success = @handler.RunProcessTask(args.authentication, args.configuration, args.parameters)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'RunProcessTask', seqid)
    end

    def process_GetEmailCampaigns(seqid, iprot, oprot)
      args = read_args(iprot, GetEmailCampaigns_args)
      result = GetEmailCampaigns_result.new()
      begin
        result.success = @handler.GetEmailCampaigns(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetEmailCampaigns', seqid)
    end

    def process_CreateEmailCampaign(seqid, iprot, oprot)
      args = read_args(iprot, CreateEmailCampaign_args)
      result = CreateEmailCampaign_result.new()
      begin
        @handler.CreateEmailCampaign(args.authentication, args.configuration, args.emailCampaignId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateEmailCampaign', seqid)
    end

    def process_UpdateEmailCampaign(seqid, iprot, oprot)
      args = read_args(iprot, UpdateEmailCampaign_args)
      result = UpdateEmailCampaign_result.new()
      begin
        @handler.UpdateEmailCampaign(args.authentication, args.configuration, args.emailCampaign)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateEmailCampaign', seqid)
    end

    def process_DeleteEmailCampaign(seqid, iprot, oprot)
      args = read_args(iprot, DeleteEmailCampaign_args)
      result = DeleteEmailCampaign_result.new()
      begin
        @handler.DeleteEmailCampaign(args.authentication, args.configuration, args.emailCampaignId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteEmailCampaign', seqid)
    end

    def process_GetChoices(seqid, iprot, oprot)
      args = read_args(iprot, GetChoices_args)
      result = GetChoices_result.new()
      begin
        result.success = @handler.GetChoices(args.authentication, args.configuration, args.choiceSourceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetChoices', seqid)
    end

    def process_CreateChoice(seqid, iprot, oprot)
      args = read_args(iprot, CreateChoice_args)
      result = CreateChoice_result.new()
      begin
        @handler.CreateChoice(args.authentication, args.configuration, args.choiceSourceId, args.choiceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateChoice', seqid)
    end

    def process_UpdateChoice(seqid, iprot, oprot)
      args = read_args(iprot, UpdateChoice_args)
      result = UpdateChoice_result.new()
      begin
        @handler.UpdateChoice(args.authentication, args.configuration, args.choiceSourceId, args.choice)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateChoice', seqid)
    end

    def process_DeleteChoice(seqid, iprot, oprot)
      args = read_args(iprot, DeleteChoice_args)
      result = DeleteChoice_result.new()
      begin
        @handler.DeleteChoice(args.authentication, args.configuration, args.choiceSourceId, args.choiceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteChoice', seqid)
    end

    def process_GetChoiceVariants(seqid, iprot, oprot)
      args = read_args(iprot, GetChoiceVariants_args)
      result = GetChoiceVariants_result.new()
      begin
        result.success = @handler.GetChoiceVariants(args.authentication, args.configuration, args.choiceSourceId, args.choiceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetChoiceVariants', seqid)
    end

    def process_CreateChoiceVariant(seqid, iprot, oprot)
      args = read_args(iprot, CreateChoiceVariant_args)
      result = CreateChoiceVariant_result.new()
      begin
        @handler.CreateChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceId, args.choiceVariantId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateChoiceVariant', seqid)
    end

    def process_UpdateChoiceVariant(seqid, iprot, oprot)
      args = read_args(iprot, UpdateChoiceVariant_args)
      result = UpdateChoiceVariant_result.new()
      begin
        @handler.UpdateChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceVariant)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateChoiceVariant', seqid)
    end

    def process_DeleteChoiceVariant(seqid, iprot, oprot)
      args = read_args(iprot, DeleteChoiceVariant_args)
      result = DeleteChoiceVariant_result.new()
      begin
        @handler.DeleteChoiceVariant(args.authentication, args.configuration, args.choiceSourceId, args.choiceId, args.choiceVariantId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteChoiceVariant', seqid)
    end

    def process_GetProcessStatus(seqid, iprot, oprot)
      args = read_args(iprot, GetProcessStatus_args)
      result = GetProcessStatus_result.new()
      begin
        result.success = @handler.GetProcessStatus(args.authentication, args.configuration, args.processTaskExecutionId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetProcessStatus', seqid)
    end

    def process_GetConfigurationDifferences(seqid, iprot, oprot)
      args = read_args(iprot, GetConfigurationDifferences_args)
      result = GetConfigurationDifferences_result.new()
      begin
        result.success = @handler.GetConfigurationDifferences(args.authentication, args.configurationVersionSource, args.configurationVersionDestination)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetConfigurationDifferences', seqid)
    end

    def process_PublishConfiguration(seqid, iprot, oprot)
      args = read_args(iprot, PublishConfiguration_args)
      result = PublishConfiguration_result.new()
      begin
        @handler.PublishConfiguration(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'PublishConfiguration', seqid)
    end

    def process_CloneConfiguration(seqid, iprot, oprot)
      args = read_args(iprot, CloneConfiguration_args)
      result = CloneConfiguration_result.new()
      begin
        @handler.CloneConfiguration(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CloneConfiguration', seqid)
    end

    def process_CreateReferenceCSVFile(seqid, iprot, oprot)
      args = read_args(iprot, CreateReferenceCSVFile_args)
      result = CreateReferenceCSVFile_result.new()
      begin
        result.success = @handler.CreateReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateReferenceCSVFile', seqid)
    end

    def process_UpdateReferenceCSVFile(seqid, iprot, oprot)
      args = read_args(iprot, UpdateReferenceCSVFile_args)
      result = UpdateReferenceCSVFile_result.new()
      begin
        @handler.UpdateReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateReferenceCSVFile', seqid)
    end

    def process_DeleteReferenceCSVFile(seqid, iprot, oprot)
      args = read_args(iprot, DeleteReferenceCSVFile_args)
      result = DeleteReferenceCSVFile_result.new()
      begin
        @handler.DeleteReferenceCSVFile(args.authentication, args.configuration, args.fileDescriptor)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteReferenceCSVFile', seqid)
    end

    def process_GetAllReferenceCSVFiles(seqid, iprot, oprot)
      args = read_args(iprot, GetAllReferenceCSVFiles_args)
      result = GetAllReferenceCSVFiles_result.new()
      begin
        result.success = @handler.GetAllReferenceCSVFiles(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetAllReferenceCSVFiles', seqid)
    end

    def process_CreateFieldsFromReferenceCSVFile(seqid, iprot, oprot)
      args = read_args(iprot, CreateFieldsFromReferenceCSVFile_args)
      result = CreateFieldsFromReferenceCSVFile_result.new()
      begin
        @handler.CreateFieldsFromReferenceCSVFile(args.authentication, args.configurationVersion, args.fieldsConfigurationXML)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateFieldsFromReferenceCSVFile', seqid)
    end

    def process_GetSchedulings(seqid, iprot, oprot)
      args = read_args(iprot, GetSchedulings_args)
      result = GetSchedulings_result.new()
      begin
        result.success = @handler.GetSchedulings(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetSchedulings', seqid)
    end

    def process_CreateScheduling(seqid, iprot, oprot)
      args = read_args(iprot, CreateScheduling_args)
      result = CreateScheduling_result.new()
      begin
        @handler.CreateScheduling(args.authentication, args.configuration, args.schedulingId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateScheduling', seqid)
    end

    def process_UpdateScheduling(seqid, iprot, oprot)
      args = read_args(iprot, UpdateScheduling_args)
      result = UpdateScheduling_result.new()
      begin
        @handler.UpdateScheduling(args.authentication, args.configuration, args.scheduling)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateScheduling', seqid)
    end

    def process_DeleteScheduling(seqid, iprot, oprot)
      args = read_args(iprot, DeleteScheduling_args)
      result = DeleteScheduling_result.new()
      begin
        @handler.DeleteScheduling(args.authentication, args.configuration, args.schedulingId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteScheduling', seqid)
    end

    def process_RunScheduling(seqid, iprot, oprot)
      args = read_args(iprot, RunScheduling_args)
      result = RunScheduling_result.new()
      begin
        @handler.RunScheduling(args.authentication, args.configuration, args.parameters)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'RunScheduling', seqid)
    end

    def process_GetRecommendationBlocks(seqid, iprot, oprot)
      args = read_args(iprot, GetRecommendationBlocks_args)
      result = GetRecommendationBlocks_result.new()
      begin
        result.success = @handler.GetRecommendationBlocks(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetRecommendationBlocks', seqid)
    end

    def process_CreateRecommendationBlock(seqid, iprot, oprot)
      args = read_args(iprot, CreateRecommendationBlock_args)
      result = CreateRecommendationBlock_result.new()
      begin
        @handler.CreateRecommendationBlock(args.authentication, args.configuration, args.recommendationBlockId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateRecommendationBlock', seqid)
    end

    def process_UpdateRecommendationBlock(seqid, iprot, oprot)
      args = read_args(iprot, UpdateRecommendationBlock_args)
      result = UpdateRecommendationBlock_result.new()
      begin
        @handler.UpdateRecommendationBlock(args.authentication, args.configuration, args.recommendationBlock)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateRecommendationBlock', seqid)
    end

    def process_DeleteRecommendationBlock(seqid, iprot, oprot)
      args = read_args(iprot, DeleteRecommendationBlock_args)
      result = DeleteRecommendationBlock_result.new()
      begin
        @handler.DeleteRecommendationBlock(args.authentication, args.configuration, args.recommendationBlockId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteRecommendationBlock', seqid)
    end

    def process_GetDataSources(seqid, iprot, oprot)
      args = read_args(iprot, GetDataSources_args)
      result = GetDataSources_result.new()
      begin
        result.success = @handler.GetDataSources(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetDataSources', seqid)
    end

    def process_CreateDataSource(seqid, iprot, oprot)
      args = read_args(iprot, CreateDataSource_args)
      result = CreateDataSource_result.new()
      begin
        @handler.CreateDataSource(args.authentication, args.configuration, args.dataSourceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateDataSource', seqid)
    end

    def process_UpdateDataSource(seqid, iprot, oprot)
      args = read_args(iprot, UpdateDataSource_args)
      result = UpdateDataSource_result.new()
      begin
        @handler.UpdateDataSource(args.authentication, args.configuration, args.dataSource)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateDataSource', seqid)
    end

    def process_DeleteDataSource(seqid, iprot, oprot)
      args = read_args(iprot, DeleteDataSource_args)
      result = DeleteDataSource_result.new()
      begin
        @handler.DeleteDataSource(args.authentication, args.configuration, args.dataSourceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteDataSource', seqid)
    end

    def process_GetDataExports(seqid, iprot, oprot)
      args = read_args(iprot, GetDataExports_args)
      result = GetDataExports_result.new()
      begin
        result.success = @handler.GetDataExports(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetDataExports', seqid)
    end

    def process_CreateDataExport(seqid, iprot, oprot)
      args = read_args(iprot, CreateDataExport_args)
      result = CreateDataExport_result.new()
      begin
        @handler.CreateDataExport(args.authentication, args.configuration, args.dataExportId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateDataExport', seqid)
    end

    def process_UpdateDataExport(seqid, iprot, oprot)
      args = read_args(iprot, UpdateDataExport_args)
      result = UpdateDataExport_result.new()
      begin
        @handler.UpdateDataExport(args.authentication, args.configuration, args.dataExport)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateDataExport', seqid)
    end

    def process_DeleteDataExport(seqid, iprot, oprot)
      args = read_args(iprot, DeleteDataExport_args)
      result = DeleteDataExport_result.new()
      begin
        @handler.DeleteDataExport(args.authentication, args.configuration, args.dataExportId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteDataExport', seqid)
    end

    def process_GetReferenceCSVFileDataSources(seqid, iprot, oprot)
      args = read_args(iprot, GetReferenceCSVFileDataSources_args)
      result = GetReferenceCSVFileDataSources_result.new()
      begin
        result.success = @handler.GetReferenceCSVFileDataSources(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetReferenceCSVFileDataSources', seqid)
    end

    def process_CreateReferenceCSVDataSource(seqid, iprot, oprot)
      args = read_args(iprot, CreateReferenceCSVDataSource_args)
      result = CreateReferenceCSVDataSource_result.new()
      begin
        @handler.CreateReferenceCSVDataSource(args.authentication, args.configuration, args.dataSourceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'CreateReferenceCSVDataSource', seqid)
    end

    def process_UpdateReferenceCSVDataSource(seqid, iprot, oprot)
      args = read_args(iprot, UpdateReferenceCSVDataSource_args)
      result = UpdateReferenceCSVDataSource_result.new()
      begin
        @handler.UpdateReferenceCSVDataSource(args.authentication, args.configuration, args.dataSource)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'UpdateReferenceCSVDataSource', seqid)
    end

    def process_DeleteReferenceCSVDataSource(seqid, iprot, oprot)
      args = read_args(iprot, DeleteReferenceCSVDataSource_args)
      result = DeleteReferenceCSVDataSource_result.new()
      begin
        @handler.DeleteReferenceCSVDataSource(args.authentication, args.configuration, args.dataSourceId)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'DeleteReferenceCSVDataSource', seqid)
    end

    def process_GetLastTransactionID(seqid, iprot, oprot)
      args = read_args(iprot, GetLastTransactionID_args)
      result = GetLastTransactionID_result.new()
      begin
        result.success = @handler.GetLastTransactionID(args.authentication, args.configuration)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetLastTransactionID', seqid)
    end

    def process_GetPageViews(seqid, iprot, oprot)
      args = read_args(iprot, GetPageViews_args)
      result = GetPageViews_result.new()
      begin
        result.success = @handler.GetPageViews(args.authentication, args.configuration, args.range, args.precision)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetPageViews', seqid)
    end

    def process_GetChoiceReport(seqid, iprot, oprot)
      args = read_args(iprot, GetChoiceReport_args)
      result = GetChoiceReport_result.new()
      begin
        result.success = @handler.GetChoiceReport(args.authentication, args.configuration, args.request)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetChoiceReport', seqid)
    end

    def process_GetTransactionReport(seqid, iprot, oprot)
      args = read_args(iprot, GetTransactionReport_args)
      result = GetTransactionReport_result.new()
      begin
        result.success = @handler.GetTransactionReport(args.authentication, args.configuration, args.request)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetTransactionReport', seqid)
    end

    def process_GetBehaviorReport(seqid, iprot, oprot)
      args = read_args(iprot, GetBehaviorReport_args)
      result = GetBehaviorReport_result.new()
      begin
        result.success = @handler.GetBehaviorReport(args.authentication, args.configuration, args.request)
      rescue ::DataIntelligenceServiceException => e
        result.e = e
      end
      write_result(result, oprot, 'GetBehaviorReport', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetAuthentication_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::AuthenticationRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthentication_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Authentication},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdatePassword_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    NEWPASSWORD = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      NEWPASSWORD => {:type => ::Thrift::Types::STRING, :name => 'newPassword'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdatePassword_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConfigurationVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    VERSIONTYPE = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      VERSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'versionType', :enum_class => ::ConfigurationVersionType}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @versionType.nil? || ::ConfigurationVersionType::VALID_VALUES.include?(@versionType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field versionType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConfigurationVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ConfigurationVersion},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetDataSourcesConfiguration_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATIONVERSION = 2
    DATASOURCESCONFIGURATIONXML = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATIONVERSION => {:type => ::Thrift::Types::STRUCT, :name => 'configurationVersion', :class => ::ConfigurationVersion},
      DATASOURCESCONFIGURATIONXML => {:type => ::Thrift::Types::STRING, :name => 'dataSourcesConfigurationXML'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SetDataSourcesConfiguration_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFields_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFields_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Field}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateField_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    FIELDID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      FIELDID => {:type => ::Thrift::Types::STRING, :name => 'fieldId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateField_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateField_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    FIELD = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      FIELD => {:type => ::Thrift::Types::STRUCT, :name => 'field', :class => ::Field}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateField_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteField_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    FIELDID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      FIELDID => {:type => ::Thrift::Types::STRING, :name => 'fieldId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteField_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProcessTasks_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProcessTasks_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ProcessTask}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateProcessTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    PROCESSTASKID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      PROCESSTASKID => {:type => ::Thrift::Types::STRING, :name => 'processTaskId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateProcessTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProcessTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    PROCESSTASK = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      PROCESSTASK => {:type => ::Thrift::Types::STRUCT, :name => 'processTask', :class => ::ProcessTask}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProcessTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteProcessTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    PROCESSTASKID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      PROCESSTASKID => {:type => ::Thrift::Types::STRING, :name => 'processTaskId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteProcessTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RunProcessTask_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    PARAMETERS = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      PARAMETERS => {:type => ::Thrift::Types::STRUCT, :name => 'parameters', :class => ::ProcessTaskExecutionParameters}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RunProcessTask_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetEmailCampaigns_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetEmailCampaigns_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::EmailCampaign}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateEmailCampaign_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    EMAILCAMPAIGNID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      EMAILCAMPAIGNID => {:type => ::Thrift::Types::STRING, :name => 'emailCampaignId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateEmailCampaign_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateEmailCampaign_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    EMAILCAMPAIGN = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      EMAILCAMPAIGN => {:type => ::Thrift::Types::STRUCT, :name => 'emailCampaign', :class => ::EmailCampaign}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateEmailCampaign_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteEmailCampaign_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    EMAILCAMPAIGNID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      EMAILCAMPAIGNID => {:type => ::Thrift::Types::STRING, :name => 'emailCampaignId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteEmailCampaign_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChoices_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChoices_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Choice}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChoice_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICEID = 4

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICEID => {:type => ::Thrift::Types::STRING, :name => 'choiceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChoice_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChoice_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICE = 4

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICE => {:type => ::Thrift::Types::STRUCT, :name => 'choice', :class => ::Choice}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChoice_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteChoice_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICEID = 4

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICEID => {:type => ::Thrift::Types::STRING, :name => 'choiceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteChoice_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChoiceVariants_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICEID = 4

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICEID => {:type => ::Thrift::Types::STRING, :name => 'choiceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChoiceVariants_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ChoiceVariant}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChoiceVariant_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICEID = 4
    CHOICEVARIANTID = 5

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICEID => {:type => ::Thrift::Types::STRING, :name => 'choiceId'},
      CHOICEVARIANTID => {:type => ::Thrift::Types::STRING, :name => 'choiceVariantId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateChoiceVariant_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChoiceVariant_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICEVARIANT = 4

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICEVARIANT => {:type => ::Thrift::Types::STRUCT, :name => 'choiceVariant', :class => ::ChoiceVariant}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateChoiceVariant_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteChoiceVariant_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    CHOICESOURCEID = 3
    CHOICEID = 4
    CHOICEVARIANTID = 5

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      CHOICESOURCEID => {:type => ::Thrift::Types::STRING, :name => 'choiceSourceId'},
      CHOICEID => {:type => ::Thrift::Types::STRING, :name => 'choiceId'},
      CHOICEVARIANTID => {:type => ::Thrift::Types::STRING, :name => 'choiceVariantId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteChoiceVariant_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProcessStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    PROCESSTASKEXECUTIONID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      PROCESSTASKEXECUTIONID => {:type => ::Thrift::Types::STRING, :name => 'processTaskExecutionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProcessStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProcessTaskExecutionStatus},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConfigurationDifferences_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATIONVERSIONSOURCE = 2
    CONFIGURATIONVERSIONDESTINATION = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATIONVERSIONSOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'configurationVersionSource', :class => ::ConfigurationVersion},
      CONFIGURATIONVERSIONDESTINATION => {:type => ::Thrift::Types::STRUCT, :name => 'configurationVersionDestination', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetConfigurationDifferences_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ConfigurationDifference}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PublishConfiguration_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PublishConfiguration_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneConfiguration_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CloneConfiguration_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateReferenceCSVFile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    FILEDESCRIPTOR = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      FILEDESCRIPTOR => {:type => ::Thrift::Types::STRUCT, :name => 'fileDescriptor', :class => ::ReferenceCSVFileDescriptor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateReferenceCSVFile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ReferenceCSVFileDescriptor},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateReferenceCSVFile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    FILEDESCRIPTOR = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      FILEDESCRIPTOR => {:type => ::Thrift::Types::STRUCT, :name => 'fileDescriptor', :class => ::ReferenceCSVFileDescriptor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateReferenceCSVFile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteReferenceCSVFile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    FILEDESCRIPTOR = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      FILEDESCRIPTOR => {:type => ::Thrift::Types::STRUCT, :name => 'fileDescriptor', :class => ::ReferenceCSVFileDescriptor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteReferenceCSVFile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllReferenceCSVFiles_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllReferenceCSVFiles_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ReferenceCSVFileDescriptor}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateFieldsFromReferenceCSVFile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATIONVERSION = 2
    FIELDSCONFIGURATIONXML = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATIONVERSION => {:type => ::Thrift::Types::STRUCT, :name => 'configurationVersion', :class => ::ConfigurationVersion},
      FIELDSCONFIGURATIONXML => {:type => ::Thrift::Types::STRING, :name => 'fieldsConfigurationXML'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateFieldsFromReferenceCSVFile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSchedulings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSchedulings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Scheduling}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateScheduling_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    SCHEDULINGID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      SCHEDULINGID => {:type => ::Thrift::Types::STRING, :name => 'schedulingId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateScheduling_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateScheduling_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    SCHEDULING = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      SCHEDULING => {:type => ::Thrift::Types::STRUCT, :name => 'scheduling', :class => ::Scheduling}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateScheduling_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteScheduling_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    SCHEDULINGID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      SCHEDULINGID => {:type => ::Thrift::Types::STRING, :name => 'schedulingId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteScheduling_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RunScheduling_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    PARAMETERS = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      PARAMETERS => {:type => ::Thrift::Types::STRUCT, :name => 'parameters', :class => ::SchedulingExecutionParameters}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RunScheduling_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecommendationBlocks_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRecommendationBlocks_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::RecommendationBlock}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRecommendationBlock_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    RECOMMENDATIONBLOCKID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      RECOMMENDATIONBLOCKID => {:type => ::Thrift::Types::STRING, :name => 'recommendationBlockId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRecommendationBlock_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateRecommendationBlock_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    RECOMMENDATIONBLOCK = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      RECOMMENDATIONBLOCK => {:type => ::Thrift::Types::STRUCT, :name => 'recommendationBlock', :class => ::RecommendationBlock}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateRecommendationBlock_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteRecommendationBlock_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    RECOMMENDATIONBLOCKID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      RECOMMENDATIONBLOCKID => {:type => ::Thrift::Types::STRING, :name => 'recommendationBlockId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteRecommendationBlock_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDataSources_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDataSources_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::DataSource}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateDataSource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATASOURCEID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATASOURCEID => {:type => ::Thrift::Types::STRING, :name => 'dataSourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateDataSource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateDataSource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATASOURCE = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATASOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'dataSource', :class => ::DataSource}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateDataSource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteDataSource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATASOURCEID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATASOURCEID => {:type => ::Thrift::Types::STRING, :name => 'dataSourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteDataSource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDataExports_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetDataExports_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::DataExport}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateDataExport_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATAEXPORTID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATAEXPORTID => {:type => ::Thrift::Types::STRING, :name => 'dataExportId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateDataExport_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateDataExport_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATAEXPORT = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATAEXPORT => {:type => ::Thrift::Types::STRUCT, :name => 'dataExport', :class => ::DataExport}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateDataExport_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteDataExport_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATAEXPORTID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATAEXPORTID => {:type => ::Thrift::Types::STRING, :name => 'dataExportId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteDataExport_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReferenceCSVFileDataSources_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetReferenceCSVFileDataSources_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ReferenceCSVDataSource}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateReferenceCSVDataSource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATASOURCEID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATASOURCEID => {:type => ::Thrift::Types::STRING, :name => 'dataSourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateReferenceCSVDataSource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateReferenceCSVDataSource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATASOURCE = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATASOURCE => {:type => ::Thrift::Types::STRUCT, :name => 'dataSource', :class => ::ReferenceCSVDataSource}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateReferenceCSVDataSource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteReferenceCSVDataSource_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    DATASOURCEID = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      DATASOURCEID => {:type => ::Thrift::Types::STRING, :name => 'dataSourceId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DeleteReferenceCSVDataSource_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastTransactionID_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastTransactionID_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPageViews_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    RANGE = 3
    PRECISION = 4

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      RANGE => {:type => ::Thrift::Types::STRUCT, :name => 'range', :class => ::TimeRange},
      PRECISION => {:type => ::Thrift::Types::I32, :name => 'precision', :enum_class => ::TimeRangePrecision}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @precision.nil? || ::TimeRangePrecision::VALID_VALUES.include?(@precision)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field precision!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetPageViews_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::TimeRangeValue}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChoiceReport_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    REQUEST = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::ChoiceReportRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChoiceReport_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChoiceReport},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTransactionReport_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    REQUEST = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::TransactionReportRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTransactionReport_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TransactionReport},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBehaviorReport_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHENTICATION = 1
    CONFIGURATION = 2
    REQUEST = 3

    FIELDS = {
      AUTHENTICATION => {:type => ::Thrift::Types::STRUCT, :name => 'authentication', :class => ::Authentication},
      CONFIGURATION => {:type => ::Thrift::Types::STRUCT, :name => 'configuration', :class => ::ConfigurationVersion},
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::BehaviorReportRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBehaviorReport_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::BehaviorReport},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::DataIntelligenceServiceException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

